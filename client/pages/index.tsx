import Head from "next/head";
import { Image, Flex, Text, Heading } from "@chakra-ui/react";
//@ts-ignore
import * as fcl from "@onflow/fcl";
//@ts-ignore
import * as types from "@onflow/types";
import { useEffect, useState } from "react";
import { FlowAccount } from "../types/flowTypes";
import LoginButton from "../components/LoginButton";
import { mintNFT } from "../cadence/transactions/mintNFT_tx";
import { getTotalSupply } from "../cadence/scripts/getTotalSupply_script";
import LogoutButton from "../components/LogoutButton";
import MintButton from "../components/MintButton";
import { getMetadata } from "../cadence/scripts/getMetadata_scripts";
import { getIDs } from "../cadence/scripts/getID_scripts";

fcl.config({
	"flow.network": "testnet",
	"app.detail.title": "LostCharacters", // Change the title!
	"accessNode.api": "https://rest-testnet.onflow.org",
	"app.detail.icon": "https://placekitten.com/g/200/200",
	"discovery.wallet": "https://fcl-discovery.onflow.org/testnet/authn",
});

export default function Home() {
	const TWITTER_HANDLE = "_buildspace";
	const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;
  const IPFS = "bafybeigw7vde3d3qgmb2ngc6urbc7wlb7i6mrddlqmrf5ta3ttdywx354e"
	const [user, setUser] = useState<FlowAccount>();
	const [network, setNetwork] = useState("");
	const [images, setImages] = useState<Array<any>>([]);

	const logIn = () => {
		fcl.authenticate();
	};

	const logOut = () => {
		fcl.unauthenticate();
	};

	const fetchNFTs = async () => {
		// Empty the images array
		setImages([]);
		let IDs: string[] = [];

		// Fetch the IDs with our script (no fees or signers necessary)
		try {
			IDs = await fcl.query({
				cadence: `${getIDs}`,
				args: (arg: any, t: any) => [arg(user!.addr, t.Address)],
			});
		} catch (err) {
			console.log("No NFTs Owned");
		}

		let _imageSrc: any[] = [];
		try {
			for (let i = 0; i < IDs.length; i++) {
				const result = await fcl.query({
					cadence: `${getMetadata}`,
					args: (arg: any, t: any) => [
						arg(user!.addr, types.Address),
						arg(IDs[i].toString(), types.UInt64),
					],
				});
				// If the source is an IPFS link, remove the "ipfs://" prefix
				if (result["thumbnail"].startsWith("ipfs://")) {
					_imageSrc.push(result["thumbnail"].substring(7));
					// Add a gateway prefix
					_imageSrc[i] = "https://" + IPFS + ".ipfs.nftstorage.link/" + [i] + ".png";
				} else {
					_imageSrc.push(result["thumbnail"]);
				}
			}
		} catch (err) {
			console.log(err);
		}

		if (images.length < _imageSrc.length) {
			setImages(
				Array.from({ length: _imageSrc.length }, (_, i) => i).map(
					(number, index) => (
						<img
							style={{ margin: "10px", height: "150px" }}
							src={_imageSrc[index]}
							key={number}
							alt={"NFT #" + number}
						/>
					)
				)
			);
		}
	};

	const mint = async () => {
		let _totalSupply;
		try {
			_totalSupply = await fcl.query({
				cadence: `${getTotalSupply}`,
			});
		} catch (err) {
			console.log(err);
		}

		const _id = parseInt(_totalSupply) + 1;

		try {
			const transactionId = await fcl.mutate({
				cadence: `${mintNFT}`,
				//@ts-ignore
				args: (arg, t: any) => [
					arg(user!.addr, types.Address), //address to which the NFT should be minted
					arg("Lost # " + _id.toString(), types.String), // Name
					arg("Lost characters on the blockchain", types.String), // Description
					arg(
						`ipfs://${IPFS}` +
							_id +
							".png",
						types.String
					),
				],
				proposer: fcl.currentUser,
				payer: fcl.currentUser,
				limit: 99,
			});
			console.log("Minting NFT now with transaction ID", transactionId);
			const transaction = await fcl.tx(transactionId).onceSealed();
			console.log(
				"Testnet explorer link:",
				`https://testnet.flowscan.org/transaction/${transactionId}`
			);
			console.log(transaction);
			alert("NFT minted successfully!");
		} catch (error) {
			console.log(error);
			alert("Error minting NFT, please check the console for error details!");
		}
	};

	//Fetch NFTs
	useEffect(() => {
		if (user && user.addr) {
			fetchNFTs();
		}
	}, [user]);

	//Track Lilico network changes
	useEffect(() => {
		window.addEventListener("message", (d) => {
			if (d.data.type === "LILICO:NETWORK") setNetwork(d.data.network);
		});
	}, []);

	//Track connected user
	useEffect(() => {
		fcl.currentUser().subscribe(setUser);
	}, []);

	return (
		<Flex flexDir="column" align="center" minH="100vh" justify="space-around" my="50px">
			<Head>
				<title>Flow NFTs</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<Flex flexDir="column" align="center">
				<Flex align="center">
					<Image src="logo.png" alt="flow logo" boxSize={10} mr="5px"/>
					<Heading>Lost NFTs on Flow âœ¨</Heading>
				</Flex>

				<Text>The easiest NFT mint experience ever!</Text>
				{user && user.addr ? (
					<Flex flexDir="column" mt="30px" align="center">
						<MintButton mint={mint} />
						{images.length > 0 ? (
							<Flex flexWrap="wrap" justify="space-around">
								<Heading w="100%" textAlign="center" mb="30px">Your NFTs:</Heading>
                {images.map(image => {
                  return <Image key={image.props.src} src={image.props.src} boxSize={300} objectFit="cover" m="10px"/>
                })}
							</Flex>
						) : (
							""
						)}
						<LogoutButton user={user} logOut={logOut} />
					</Flex>
				) : (
					<LoginButton logIn={logIn} />
				)}
			</Flex>

			<Flex flexDir="column" align="center">
				<Image alt="Twitter Logo" src={"twitter.png"} boxSize={5} />
				<a
					className="footer-text"
					href={TWITTER_LINK}
					target="_blank"
					rel="noreferrer"
				>{`built on @${TWITTER_HANDLE}`}</a>
			</Flex>
		</Flex>
	);
}
